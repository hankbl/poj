/*

PRIM算法

优先级队列+访问节点标记

struct的操作符重载

*/

#include <iostream>
#include <string>
#include <queue>
using namespace std;

int matrix[101][101];
int vis[101];
int N;

struct edge
{
	int to;
	int cost;
	edge(int t, int c)
	{
		to = t;
		cost = c;
	}

	bool operator > (const edge e) const
	{
		return cost > e.cost;
	}
};

priority_queue<edge, vector<edge>, greater<edge>> que;

int prim()
{
	int sum = 0;

	vis[1] = 1;
	for (int i = 1; i <= N; i++)
	{
		edge e = edge(i, matrix[1][i]); // 初始化当前结点所有的访问值		
		que.push(e);
	}

	for (int v = 1; v < N; v++)
	{
		edge current = que.top();
		while (vis[current.to] == 1)
		{
			que.pop();          // pop已经访问过的节点
			current = que.top();
		}
		sum += current.cost;



		int p = current.to;
		vis[p] = 1;

		for (int j = 1; j <= N; j++)
		{
			if (vis[j] == 0)
			{
				edge e = edge(j, matrix[p][j]);  // 没有访问过的节点，加入到队列
				que.push(e);
			}
		}
	}
	return sum;
}

int main()
{
	while (cin >> N && N)
	{
		while (!que.empty())
		{
			que.pop();
		}
		for (int i = 1; i <= N; i++)
		{
			vis[i] = 0;
			for (int j = 1; j <= N; j++)
			{
				int d;
				cin >> d;
				matrix[i][j] = d;
			}
		}
		int a = prim();
		cout << a << endl;
	}
	return 0;
}
